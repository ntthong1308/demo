import React, { createContext, useState, useEffect, useContext } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
// Thay ƒë·ªïi t·ª´ API th·∫≠t sang API gi·∫£
import mockApi from '../services/mockApi';
// N·∫øu ƒë√£ c√†i jwt-decode, b·∫°n c√≥ th·ªÉ v·∫´n d√πng n√≥
import { jwtDecode } from 'jwt-decode';

// T√†i kho·∫£n test cho c√°c vai tr√≤ kh√°c nhau
const testUsers = {
  patient: {
    id: 1,
    firstName: 'VƒÉn',
    lastName: 'Nguy·ªÖn',
    email: 'patient@example.com',
    password: 'Patient@123',
    phoneNumber: '0987654321',
    roles: ['PATIENT'],
    username: 'patient123'
  },
  doctor: {
    id: 2,
    firstName: 'Ho√†ng',
    lastName: 'VƒÉn',
    title: 'BS',
    email: 'doctor@example.com',
    password: 'Doctor@456',
    phoneNumber: '0123456789',
    roles: ['DOCTOR'],
    specialties: ['Tim m·∫°ch', 'N·ªôi khoa'],
    username: 'doctor456'
  },
  admin: {
    id: 3,
    firstName: 'Admin',
    lastName: '',
    email: 'admin@example.com',
    password: 'Admin@789',
    phoneNumber: '0909090909',
    roles: ['ADMIN'],
    username: 'admin789'
  },
  ntthong1308: { // Gi·ªØ l·∫°i t√†i kho·∫£n test hi·ªán t·∫°i
    id: 4,
    firstName: 'Nguy·ªÖn',
    lastName: 'Th√¥ng',
    email: 'ntthong1308@example.com',
    password: 'password123',
    phoneNumber: '0123456789',
    roles: ['PATIENT'],
    username: 'ntthong1308'
  }
};

// T·∫°o context
export const AuthContext = createContext(null);

// Hook ƒë·ªÉ s·ª≠ d·ª•ng AuthContext
export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }) => {
  const [currentUser, setCurrentUser] = useState(null);
  const [token, setToken] = useState(localStorage.getItem('token'));
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  // Th√™m state ƒë·ªÉ ki·ªÉm so√°t vi·ªác t·ª± ƒë·ªông ƒëƒÉng nh·∫≠p
  const [enableAutoLogin, setEnableAutoLogin] = useState(false);
  
  const navigate = useNavigate();
  const location = useLocation();

  // Ki·ªÉm tra token v√† tr·∫°ng th√°i ƒëƒÉng nh·∫≠p khi component ƒë∆∞·ª£c mount
  useEffect(() => {
    // Kh√¥i ph·ª•c th√¥ng tin ng∆∞·ªùi d√πng t·ª´ localStorage n·∫øu c√≥
    const savedUser = localStorage.getItem('user');
    if (token && savedUser) {
      try {
        const user = JSON.parse(savedUser);
        setCurrentUser(user);
        setLoading(false);
        return;
      } catch (e) {
        console.error("Error parsing user data", e);
        // N·∫øu c√≥ l·ªói parsing, x√≥a d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
        localStorage.removeItem('user');
        localStorage.removeItem('token');
        setToken(null);
      }
    }

    // AUTO LOGIN FOR DEV/TEST ENVIRONMENT ONLY
    // Ch·ªâ b·∫≠t code n√†y khi c·∫ßn test v√† enableAutoLogin = true
    const autoLoginForTesting = () => {
      if (process.env.NODE_ENV === 'development' && enableAutoLogin) {
        // L·∫•y tham s·ªë t·ª´ URL ƒë·ªÉ x√°c ƒë·ªãnh vai tr√≤ (n·∫øu c√≥)
        const params = new URLSearchParams(location.search);
        const testRole = params.get('testAs') || localStorage.getItem('testRole') || 'ntthong1308';
        
        // L∆∞u vai tr√≤ ƒë√£ ch·ªçn v√†o localStorage ƒë·ªÉ duy tr√¨ sau khi refresh
        if (params.get('testAs')) {
          localStorage.setItem('testRole', testRole);
        }
        
        // Ch·ªçn user ph√π h·ª£p v·ªõi vai tr√≤
        const testUser = testUsers[testRole] || testUsers.ntthong1308;
        
        console.log(`üîß DEV MODE: Auto setting test user for development - Role: ${testRole}`);
        
        // T·∫°o fake token
        const testToken = `test-token-${Date.now()}-${testRole}`;
        
        // L∆∞u v√†o state
        setCurrentUser(testUser);
        setToken(testToken);
        
        // L∆∞u v√†o localStorage ƒë·ªÉ gi·ªØ ƒëƒÉng nh·∫≠p khi refresh
        localStorage.setItem('token', testToken);
        localStorage.setItem('user', JSON.stringify(testUser));
        
        // L∆∞u th√¥ng tin vai tr√≤ ƒë√£ ch·ªçn
        console.log(`Auto logged in as ${testUser.firstName} ${testUser.lastName} (${testUser.roles.join(', ')})`);
      }
      setLoading(false);
    };

    // K√≠ch ho·∫°t auto login cho m√¥i tr∆∞·ªùng development n·∫øu ƒë√£ b·∫≠t
    autoLoginForTesting();
    
    // N·∫øu kh√¥ng t·ª± ƒë·ªông ƒëƒÉng nh·∫≠p v√† kh√¥ng c√≥ user, ƒë·∫∑t loading=false
    if (!enableAutoLogin && !savedUser) {
      setLoading(false);
    }
  }, [location, enableAutoLogin]);

  // ƒêƒÉng nh·∫≠p
  const login = async (email, password) => {
    try {
      setLoading(true);
      setError(null);
      
      // Ki·ªÉm tra th√¥ng tin ƒëƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n test
      let matchedUser = null;
      Object.values(testUsers).forEach(user => {
        if ((user.email === email || user.username === email) && user.password === password) {
          matchedUser = user;
        }
      });
      
      if (matchedUser) {
        // T·∫°o token gi·∫£
        const fakeToken = `test-token-${Date.now()}-${matchedUser.roles[0]}`;
        
        // L∆∞u th√¥ng tin ng∆∞·ªùi d√πng v√† token v√†o localStorage
        localStorage.setItem('token', fakeToken);
        localStorage.setItem('user', JSON.stringify(matchedUser));
        localStorage.setItem('testRole', matchedUser.roles[0].toLowerCase());
        
        // C·∫≠p nh·∫≠t state
        setToken(fakeToken);
        setCurrentUser(matchedUser);
        
        // Chuy·ªÉn h∆∞·ªõng d·ª±a v√†o vai tr√≤
        if (matchedUser.roles.includes('ADMIN')) {
          navigate('/admin/dashboard');
        } else if (matchedUser.roles.includes('DOCTOR')) {
          navigate('/doctor/profile'); // Chuy·ªÉn th·∫≥ng ƒë·∫øn profile ƒë·ªÉ ki·ªÉm tra
        } else {
          navigate('/patient/profile'); // Chuy·ªÉn th·∫≥ng ƒë·∫øn profile ƒë·ªÉ ki·ªÉm tra
        }
        
        return { success: true };
      }
      
      // N·∫øu kh√¥ng t√¨m th·∫•y t√†i kho·∫£n test ph√π h·ª£p, g·ªçi API gi·∫£
      const response = await mockApi.login(email, password);
      const { token: apiToken, user } = response.data;

      // L∆∞u th√¥ng tin ng∆∞·ªùi d√πng v√† token v√†o localStorage
      localStorage.setItem('token', apiToken);
      localStorage.setItem('user', JSON.stringify(user));
      
      // C·∫≠p nh·∫≠t state
      setToken(apiToken);
      setCurrentUser(user);

      // Chuy·ªÉn h∆∞·ªõng d·ª±a v√†o vai tr√≤
      if (user.roles.includes('ADMIN')) {
        navigate('/admin/dashboard');
      } else if (user.roles.includes('DOCTOR')) {
        navigate('/doctor/profile');
      } else {
        navigate('/patient/profile');
      }

      return { success: true };
    } catch (err) {
      const errorMessage = err.response?.data?.message || 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i';
      setError(errorMessage);
      return { success: false, message: errorMessage };
    } finally {
      setLoading(false);
    }
  };

  // ƒêƒÉng k√Ω
  const register = async (userData) => {
    try {
      setLoading(true);
      setError(null);
      
      // G·ªçi API gi·∫£
      const response = await mockApi.register(userData);
      
      alert('ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p.');
      return { success: true, data: response.data };
    } catch (err) {
      const errorMessage = err.response?.data?.message || 'ƒêƒÉng k√Ω th·∫•t b·∫°i';
      setError(errorMessage);
      alert(errorMessage);
      return { success: false, message: errorMessage };
    } finally {
      setLoading(false);
    }
  };

  // Qu√™n m·∫≠t kh·∫©u
  const forgotPassword = async (email) => {
    try {
      setLoading(true);
      setError(null);
      
      // G·ªçi API gi·∫£
      const response = await mockApi.forgotPassword(email);
      
      alert('H∆∞·ªõng d·∫´n ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n.');
      return { success: true, data: response.data };
    } catch (err) {
      const errorMessage = err.response?.data?.message || 'Kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu qu√™n m·∫≠t kh·∫©u';
      setError(errorMessage);
      alert(errorMessage);
      return { success: false, message: errorMessage };
    } finally {
      setLoading(false);
    }
  };

  // ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
  const resetPassword = async (token, newPassword) => {
    try {
      setLoading(true);
      setError(null);
      
      // G·ªçi API gi·∫£
      const response = await mockApi.resetPassword(token, newPassword);
      
      alert('M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng!');
      return { success: true, data: response.data };
    } catch (err) {
      const errorMessage = err.response?.data?.message || 'Kh√¥ng th·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u';
      setError(errorMessage);
      alert(errorMessage);
      return { success: false, message: errorMessage };
    } finally {
      setLoading(false);
    }
  };

  // ƒêƒÉng xu·∫•t - ƒê·∫£m b·∫£o lo·∫°i b·ªè h·∫øt d·ªØ li·ªáu ng∆∞·ªùi d√πng
  const logout = () => {
    // X√≥a d·ªØ li·ªáu t·ª´ localStorage
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    localStorage.removeItem('testRole');
    
    // ƒê·∫∑t l·∫°i c√°c state
    setCurrentUser(null);
    setToken(null);
    setError(null);
    
    // ƒê·∫£m b·∫£o t·∫Øt auto login
    setEnableAutoLogin(false);
    
    // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang ƒëƒÉng nh·∫≠p
    navigate('/login');
    
    console.log('ƒê√£ ƒëƒÉng xu·∫•t th√†nh c√¥ng');
  };

  // Chuy·ªÉn ƒë·ªïi t√†i kho·∫£n test cho vi·ªác ki·ªÉm tra (ch·ªâ d√πng cho dev mode)
  const switchTestUser = (role) => {
    if (process.env.NODE_ENV !== 'development') return;
    
    const selectedUser = testUsers[role] || testUsers.patient;
    const testToken = `test-token-${Date.now()}-${role}`;
    
    // L∆∞u v√†o state
    setCurrentUser(selectedUser);
    setToken(testToken);
    
    // L∆∞u v√†o localStorage
    localStorage.setItem('token', testToken);
    localStorage.setItem('user', JSON.stringify(selectedUser));
    localStorage.setItem('testRole', role);
    
    // Chuy·ªÉn h∆∞·ªõng ph√π h·ª£p
    if (selectedUser.roles.includes('ADMIN')) {
      navigate('/admin/dashboard');
    } else if (selectedUser.roles.includes('DOCTOR')) {
      navigate('/doctor/profile');
    } else {
      navigate('/patient/profile');
    }
    
    console.log(`Switched to ${selectedUser.firstName} ${selectedUser.lastName} (${selectedUser.roles.join(', ')})`);
  };

  // Ki·ªÉm tra vai tr√≤ ng∆∞·ªùi d√πng
  const hasRole = (role) => {
    return currentUser?.roles?.includes(role) || false;
  };

  // Ki·ªÉm tra x√°c th·ª±c
  const isAuthenticated = !!token && !!currentUser;

  // Gi√° tr·ªã context
  const value = {
    currentUser,
    loading,
    error,
    isAuthenticated,
    login,
    register,
    logout,
    forgotPassword,
    resetPassword,
    hasRole,
    isAdmin: hasRole('ADMIN'),
    isDoctor: hasRole('DOCTOR'),
    isPatient: hasRole('PATIENT'),
    // Th√™m h√†m ƒë·ªÉ chuy·ªÉn ƒë·ªïi t√†i kho·∫£n test cho dev
    switchTestUser,
    // Th√™m h√†m ƒë·ªÉ b·∫≠t/t·∫Øt t·ª± ƒë·ªông ƒëƒÉng nh·∫≠p
    toggleAutoLogin: () => setEnableAutoLogin(!enableAutoLogin),
    enableAutoLogin,
    // Th√™m danh s√°ch t√†i kho·∫£n test ƒë·ªÉ hi·ªÉn th·ªã trong trang login (n·∫øu c·∫ßn)
    testUsers: process.env.NODE_ENV === 'development' ? testUsers : null
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};